{"version":3,"sources":["hooks/useLocalStorage.jsx","components/ContactsForm/ContactsForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App/App.js","index.js"],"names":["useLocalStorage","key","defaultValue","useState","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","ContactsForm","onSubmit","name","setName","number","setNumber","handleChange","e","currentTarget","value","reset","preventDefault","type","onChange","id","pattern","title","required","onClick","console","log","ContactList","contacts","handleDeleteContact","map","prototype","PropTypes","string","isRequired","func","array","Filter","onChangeFilter","defaultProps","App","setContacts","filter","setFilter","contactsResults","normolizedFilter","toLowerCase","contact","includes","onFilterName","newContact","shortid","generate","find","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12c10433.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key) ?? defaultValue);\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport default useLocalStorage;\n","import { useState } from 'react';\n\nfunction ContactsForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  // state = {\n  //   name: '',\n  //   number: '',\n  // };\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n    //setName(value);\n    // console.log(\"VALUE:\", e.currentTarget);\n    // console.log(\"NAME:\", [name]);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    // this.setState({ name: '', number: '' });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit}\n        //   onSubmit={(e) => {\n        //     e.preventDefault();\n        //     console.log(e.currentTarget);\n        //   }}\n      >\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button\n          onClick={() => {\n            console.log('add contakt');\n          }}\n          type=\"submit\"\n        >\n          add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactsForm;\n\n/////////CLASS///////////////////////////////////////////////////////\n// import React, { Component } from 'react';\n\n// class ContactsForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // console.log(\"VALUE:\", e.currentTarget);\n//     // console.log(\"NAME:\", [name]);\n//   };\n\n//   handleSubmit = e => {\n//     const { name, number } = this.state;\n//     e.preventDefault();\n//     this.props.onSubmit(name, number);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <form\n//           onSubmit={this.handleSubmit}\n//           //   onSubmit={(e) => {\n//           //     e.preventDefault();\n//           //     console.log(e.currentTarget);\n//           //   }}\n//         >\n//           <label>\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={this.state.name}\n//               onChange={this.handleChange}\n//               id={this.state.name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//               required\n//             />\n//           </label>\n//           <label>\n//             Number\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               value={this.state.number}\n//               onChange={this.handleChange}\n//               id={this.state.number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//             />\n//           </label>\n//           <button\n//             onClick={() => {\n//               console.log('add contakt');\n//             }}\n//             type=\"submit\"\n//           >\n//             add contact\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactsForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, handleDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>{name}</p>\n          <p>{number}</p>\n          <button type=\"button\" onClick={() => handleDeleteContact(id)}>\n            delete contact\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChangeFilter }) => {\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChangeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Fragment } from 'react';\nimport { useState } from 'react';\nimport shortid from 'shortid';\nimport './App.css';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport ContactsForm from '../components/ContactsForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\n\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  const handleSubmit = (name, number) => {\n    //console.log(contacts);\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    // const { contacts } = this.state;\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase(),\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    //console.log(contacts);\n    setContacts(contacts => [newContact, ...contacts]);\n  };\n\n  const handleRemoveContact = id => {\n    setContacts(contacts => contacts.filter(contact => contact.id !== id));\n  };\n\n  const onChangeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n  const onFilterName = () => {\n    // const { filter, contacts } = this.state;\n    const normolizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normolizedFilter),\n    );\n  };\n\n  const contactsResults = onFilterName();\n\n  return (\n    <Fragment>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm onSubmit={handleSubmit} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChangeFilter={onChangeFilter} />\n\n        <ContactList\n          contacts={contactsResults}\n          handleDeleteContact={handleRemoveContact}\n        />\n      </div>\n    </Fragment>\n  );\n}\n/////////////////////////////CLASS//////////////////\n// export default App;\n// import React, { Component, Fragment } from 'react';\n// import shortid from 'shortid';\n// import './App.css';\n\n// import ContactsForm from '../components/ContactsForm';\n// import ContactList from '../components/ContactList';\n// import Filter from '../components/Filter';\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//     // name: '',\n//     // number: '',\n//   };\n//   //один раз\n//   componentDidMount() {\n//     //localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     const localContacts = localStorage.getItem('contacts');\n//     console.log(localContacts);\n//     const parsedContacts = JSON.parse(localContacts);\n//     console.log(parsedContacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   //при каждом обновлении пропсов или стейта\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log(this.state.contacts);\n//     console.log(prevState.contacts);\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log('ОБНОВИЛОСЬ');\n//       //setState только после условия - иначе зациклится\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   handleSubmit = (name, number) => {\n//     console.log(this.state.contacts);\n//     const newContact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n//     const { contacts } = this.state;\n//     if (\n//       contacts.find(\n//         contact => contact.name.toLowerCase() === newContact.name.toLowerCase(),\n//       )\n//     ) {\n//       alert(`${newContact.name} is already in contacts.`);\n//       return;\n//     }\n\n//     console.log(contacts);\n//     this.setState(({ contacts }) => ({\n//       contacts: [newContact, ...contacts],\n//     }));\n//   };\n\n//   handleRemoveContact = id => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== id),\n//     }));\n//   };\n\n//   onChangeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n//   onFilterName = () => {\n//     const { filter, contacts } = this.state;\n//     const normolizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normolizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const contactsResults = this.onFilterName();\n//     return (\n//       <Fragment>\n//         <div>\n//           <h1>Phonebook</h1>\n//           <ContactsForm onSubmit={this.handleSubmit} />\n\n//           <h2>Contacts</h2>\n//           <Filter\n//             value={this.state.filter}\n//             onChangeFilter={this.onChangeFilter}\n//           />\n\n//           <ContactList\n//             contacts={contactsResults}\n//             handleDeleteContact={this.handleRemoveContact}\n//           />\n//         </div>\n//       </Fragment>\n//     );\n//   }\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}